_simple_type = void_type | integral_type | floating_point_type | boolean_type | scoped_type_identifier | generic_type | type_identifier
_unannotated_type = _simple_type | array_type
_type = _unannotated_type | annotated_type

_name = identifier | scoped_identifier

_annotaion = annotation | marker_annotation

*:
  name: _name

*:
  modifiers: modifiers

class_declaration:
  name: identifier

method_declaration:
  name: identifier
  type: _simple_type
  param_cnt: $cnt(formal_parameters.*)

assignment_expression:
  name: identifier | filed_access | array_access

method_reference:
  class: _type | primary_expression | super

# annotation
marker_annotation:
  name: _name

annotation:
  name: _name

annotation_argument_list
element_value_array_initializer
element_value_pair

# declaration
module_declaration:
  name: _name

package_declaration:
  name: _name

field_declaration:
  name: variable_declarator
  type: _unannotated_type

annotation_type_element_declaration:
  type: _unannotated_type

constant_declaration:
  name: [variable_declarator]
  type: _unannotated_type



# inherit
superclass:
  name: _type

identifier
scoped_identifier

# literal
string_literal
character_literal
decimal_integer_literal
hex_integer_literal
octal_integer_literal
binary_integer_literal
decimal_floating_point_literal
hex_floating_point_literal
null_literal
class_literal
asterisk
true
false

# expression
expression
# primary_expression
# cast_expression
# binary_expression
# instanceof_expression
# lambda_expression
# ternary_expression
# unary_expression
# update_expression

# array_creation_expression
# dimensions_expr

field_access
array_access

# type
*_type

# modifiers
modifiers

# parameters
type_parameter

type_arguments


method_invocation/argument_list.expression:
  type: "arg"
  idx: $idx(argument_list.expression)

*/super_interfaces.interface_type_list._type:
  type: "implements"

*/type_parameters.type_parameter:
  type: "param"

*/extends_interfaces.interface_type_list._type:
  typr: "extends"